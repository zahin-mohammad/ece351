/* *********************************************************************
 * ECE351 
 * Department of Electrical and Computer Engineering 
 * University of Waterloo 
 * Term: Spring 2019 (1195)
 *
 * The base version of this file is the intellectual property of the
 * University of Waterloo. Redistribution is prohibited.
 *
 * By pushing changes to this file I affirm that I am the author of
 * all changes. I affirm that I have complied with the course
 * collaboration policy and have not plagiarized my work. 
 *
 * I understand that redistributing this file might expose me to
 * disciplinary action under UW Policy 71. I understand that Policy 71
 * allows for retroactive modification of my final grade in a course.
 * For example, if I post my solutions to these labs on GitHub after I
 * finish ECE351, and a future student plagiarizes them, then I too
 * could be found guilty of plagiarism. Consequently, my final grade
 * in ECE351 could be retroactively lowered. This might require that I
 * repeat ECE351, which in turn might delay my graduation.
 *
 * https://uwaterloo.ca/secretariat-general-counsel/policies-procedures-guidelines/policy-71
 * 
 * ********************************************************************/

package ece351.f.test;

import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import ece351.common.ast.AssignmentStatement;
import ece351.common.ast.ConstantExpr;
import ece351.common.ast.VarExpr;
import ece351.f.ast.FProgram;
import ece351.util.BaseTest351;

/** This file is generated by the course staff from the F programs in the tests directory. */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public abstract class AbstractTestF extends BaseTest351 {
	protected abstract void test(final String name, final FProgram fp1);
	public final static Map<String,FProgram> FPROGRAMS;
	static {
		final Map<String,FProgram> m = new TreeMap<String,FProgram>();
		m.put("cse0", make_cse0());
		m.put("cse1", make_cse1());
		m.put("cse2", make_cse2());
		m.put("cse3", make_cse3());
		m.put("cse4", make_cse4());
		m.put("cse5", make_cse5());
		m.put("cse6", make_cse6());
		m.put("cse7", make_cse7());
		m.put("ex00", make_ex00());
		m.put("ex01", make_ex01());
		m.put("ex02", make_ex02());
		m.put("ex03", make_ex03());
		m.put("ex04", make_ex04());
		m.put("ex05", make_ex05());
		m.put("ex06", make_ex06());
		m.put("ex07", make_ex07());
		m.put("ex08", make_ex08());
		m.put("ex09", make_ex09());
		m.put("ex10", make_ex10());
		m.put("ex11", make_ex11());
		m.put("ex12", make_ex12());
		m.put("ex13", make_ex13());
		m.put("jvarty_advanced", make_jvarty_advanced());
		m.put("jvarty_basic", make_jvarty_basic());
		m.put("nary_or", make_nary_or());
		m.put("not_a_or_not_b", make_not_a_or_not_b());
		m.put("opt0_and_nested_or", make_opt0_and_nested_or());
		m.put("opt0_left_parens", make_opt0_left_parens());
		m.put("opt0_nested_and", make_opt0_nested_and());
		m.put("opt0_nested_or", make_opt0_nested_or());
		m.put("opt0_no_parens", make_opt0_no_parens());
		m.put("opt0_right_parens", make_opt0_right_parens());
		m.put("opt1_and_true1", make_opt1_and_true1());
		m.put("opt1_and_true2", make_opt1_and_true2());
		m.put("opt1_or_false1", make_opt1_or_false1());
		m.put("opt1_or_false2", make_opt1_or_false2());
		m.put("opt2_and_false1", make_opt2_and_false1());
		m.put("opt2_and_false2", make_opt2_and_false2());
		m.put("opt2_or_true1", make_opt2_or_true1());
		m.put("opt2_or_true2", make_opt2_or_true2());
		m.put("opt3_not_and", make_opt3_not_and());
		m.put("opt3_not_false", make_opt3_not_false());
		m.put("opt3_not_not", make_opt3_not_not());
		m.put("opt3_not_or", make_opt3_not_or());
		m.put("opt3_not_true", make_opt3_not_true());
		m.put("opt4_and_complement1", make_opt4_and_complement1());
		m.put("opt4_and_complement2", make_opt4_and_complement2());
		m.put("opt4_or_complement1", make_opt4_or_complement1());
		m.put("opt4_or_complement2", make_opt4_or_complement2());
		m.put("opt4_or_complement3", make_opt4_or_complement3());
		m.put("opt5_and_dup", make_opt5_and_dup());
		m.put("opt5_or_dup", make_opt5_or_dup());
		m.put("opt6_and_or", make_opt6_and_or());
		m.put("opt6_and_or2", make_opt6_and_or2());
		m.put("opt6_or_and", make_opt6_or_and());
		m.put("opt6_or_no_paren", make_opt6_or_no_paren());
		m.put("opt7_big1", make_opt7_big1());
		m.put("opt7_big2", make_opt7_big2());
		m.put("opt7_manual_example", make_opt7_manual_example());
		m.put("z01", make_z01());
		m.put("z02", make_z02());
		m.put("z03", make_z03());
		m.put("z04", make_z04());
		m.put("z05", make_z05());
		m.put("z06", make_z06());
		m.put("z07", make_z07());
		m.put("z08", make_z08());
		m.put("z09", make_z09());
		m.put("z10", make_z10());
		m.put("z11", make_z11());
		m.put("z12", make_z12());
		m.put("z13", make_z13());
		FPROGRAMS = Collections.unmodifiableMap(m);
	}
	@Test public void cse0() {test("cse0", FPROGRAMS.get("cse0"));}
	protected static FProgram make_cse0() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("z", ConstantExpr.TrueExpr));
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b"))));
		fp = fp.append(new AssignmentStatement("t", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("c"))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b"))));
		fp = fp.append(new AssignmentStatement("r", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("c"), new VarExpr("b")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse1() {test("cse1", FPROGRAMS.get("cse1"));}
	protected static FProgram make_cse1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("d"), new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new VarExpr("e"), new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse2() {test("cse2", FPROGRAMS.get("cse2"));}
	protected static FProgram make_cse2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("d")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("d")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse3() {test("cse3", FPROGRAMS.get("cse3"));}
	protected static FProgram make_cse3() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("d")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("e"), new VarExpr("f")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse4() {test("cse4", FPROGRAMS.get("cse4"));}
	protected static FProgram make_cse4() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("d")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("b"), new VarExpr("a")), new ece351.common.ast.AndExpr(new VarExpr("d"), new VarExpr("c")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse5() {test("cse5", FPROGRAMS.get("cse5"));}
	protected static FProgram make_cse5() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("d")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("e"), new VarExpr("f")), new ece351.common.ast.AndExpr(new VarExpr("b"), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse6() {test("cse6", FPROGRAMS.get("cse6"));}
	protected static FProgram make_cse6() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.NotExpr(new VarExpr("a")), new ece351.common.ast.NotExpr(new VarExpr("b")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.NotExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void cse7() {test("cse7", FPROGRAMS.get("cse7"));}
	protected static FProgram make_cse7() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b"))));
		fp = fp.append(new AssignmentStatement("z", new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("c"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex00() {test("ex00", FPROGRAMS.get("ex00"));}
	protected static FProgram make_ex00() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", ConstantExpr.FalseExpr));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex01() {test("ex01", FPROGRAMS.get("ex01"));}
	protected static FProgram make_ex01() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", ConstantExpr.TrueExpr));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex02() {test("ex02", FPROGRAMS.get("ex02"));}
	protected static FProgram make_ex02() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new VarExpr("a")));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex03() {test("ex03", FPROGRAMS.get("ex03"));}
	protected static FProgram make_ex03() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.NotExpr(new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex04() {test("ex04", FPROGRAMS.get("ex04"));}
	protected static FProgram make_ex04() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new VarExpr("a")));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex05() {test("ex05", FPROGRAMS.get("ex05"));}
	protected static FProgram make_ex05() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex06() {test("ex06", FPROGRAMS.get("ex06"));}
	protected static FProgram make_ex06() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("c"), new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex07() {test("ex07", FPROGRAMS.get("ex07"));}
	protected static FProgram make_ex07() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.NotExpr(new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex08() {test("ex08", FPROGRAMS.get("ex08"));}
	protected static FProgram make_ex08() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.NotExpr(new VarExpr("a")), new VarExpr("b"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex09() {test("ex09", FPROGRAMS.get("ex09"));}
	protected static FProgram make_ex09() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new ece351.common.ast.NotExpr(new VarExpr("a")), new VarExpr("b"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex10() {test("ex10", FPROGRAMS.get("ex10"));}
	protected static FProgram make_ex10() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), new ece351.common.ast.NotExpr(new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex11() {test("ex11", FPROGRAMS.get("ex11"));}
	protected static FProgram make_ex11() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex12() {test("ex12", FPROGRAMS.get("ex12"));}
	protected static FProgram make_ex12() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void ex13() {test("ex13", FPROGRAMS.get("ex13"));}
	protected static FProgram make_ex13() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.AndExpr(new VarExpr("b"), new VarExpr("c")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void jvarty_advanced() {test("jvarty_advanced", FPROGRAMS.get("jvarty_advanced"));}
	protected static FProgram make_jvarty_advanced() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("k", new ece351.common.ast.NotExpr(new ece351.common.ast.NotExpr(new ece351.common.ast.NotExpr(ConstantExpr.FalseExpr)))));
		fp = fp.append(new AssignmentStatement("l", new ece351.common.ast.NotExpr(new ece351.common.ast.OrExpr(ConstantExpr.FalseExpr, ConstantExpr.TrueExpr))));
		fp = fp.append(new AssignmentStatement("m", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("n"), new VarExpr("o")), ConstantExpr.FalseExpr)));
		fp = fp.append(new AssignmentStatement("p", new ece351.common.ast.AndExpr(ConstantExpr.TrueExpr, new ece351.common.ast.OrExpr(new VarExpr("q"), new VarExpr("r")))));
		fp = fp.append(new AssignmentStatement("s", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("t"), new VarExpr("u")), new VarExpr("v")), ConstantExpr.FalseExpr)));
		fp = fp.append(new AssignmentStatement("w", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("x"), new VarExpr("y")), new VarExpr("z")), ConstantExpr.TrueExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void jvarty_basic() {test("jvarty_basic", FPROGRAMS.get("jvarty_basic"));}
	protected static FProgram make_jvarty_basic() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("a", new ece351.common.ast.NotExpr(ConstantExpr.FalseExpr)));
		fp = fp.append(new AssignmentStatement("B", new ece351.common.ast.NotExpr(ConstantExpr.TrueExpr)));
		fp = fp.append(new AssignmentStatement("c", new ece351.common.ast.AndExpr(new VarExpr("d"), ConstantExpr.FalseExpr)));
		fp = fp.append(new AssignmentStatement("Z", new ece351.common.ast.AndExpr(ConstantExpr.FalseExpr, new VarExpr("f"))));
		fp = fp.append(new AssignmentStatement("g", new ece351.common.ast.AndExpr(new VarExpr("h"), ConstantExpr.TrueExpr)));
		fp = fp.append(new AssignmentStatement("i", new ece351.common.ast.AndExpr(ConstantExpr.TrueExpr, new VarExpr("j"))));
		fp = fp.append(new AssignmentStatement("k", new ece351.common.ast.OrExpr(new VarExpr("l"), ConstantExpr.FalseExpr)));
		fp = fp.append(new AssignmentStatement("m", new ece351.common.ast.OrExpr(ConstantExpr.FalseExpr, new VarExpr("n"))));
		fp = fp.append(new AssignmentStatement("o", new ece351.common.ast.OrExpr(new VarExpr("p"), ConstantExpr.TrueExpr)));
		fp = fp.append(new AssignmentStatement("q", new ece351.common.ast.OrExpr(ConstantExpr.TrueExpr, new VarExpr("r"))));
		fp = fp.append(new AssignmentStatement("s", new ece351.common.ast.AndExpr(new VarExpr("t"), new VarExpr("t"))));
		fp = fp.append(new AssignmentStatement("u", new ece351.common.ast.OrExpr(new VarExpr("v"), new VarExpr("v"))));
		fp = fp.append(new AssignmentStatement("w", new ece351.common.ast.OrExpr(new VarExpr("x"), new ece351.common.ast.NotExpr(new VarExpr("x")))));
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.OrExpr(new VarExpr("z"), new ece351.common.ast.AndExpr(new VarExpr("z"), new VarExpr("a")))));
		fp = fp.append(new AssignmentStatement("b", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("d")), new VarExpr("c"))));
		fp = fp.append(new AssignmentStatement("e", new ece351.common.ast.AndExpr(new VarExpr("f"), new ece351.common.ast.OrExpr(new VarExpr("f"), new VarExpr("g")))));
		fp = fp.append(new AssignmentStatement("h", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("i"), new VarExpr("j")), new VarExpr("j"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void nary_or() {test("nary_or", FPROGRAMS.get("nary_or"));}
	protected static FProgram make_nary_or() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("a")), new VarExpr("a")), new VarExpr("a")), new VarExpr("a")), new VarExpr("a")), new VarExpr("a")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void not_a_or_not_b() {test("not_a_or_not_b", FPROGRAMS.get("not_a_or_not_b"));}
	protected static FProgram make_not_a_or_not_b() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.NotExpr(new VarExpr("a")), new ece351.common.ast.NotExpr(new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt0_and_nested_or() {test("opt0_and_nested_or", FPROGRAMS.get("opt0_and_nested_or"));}
	protected static FProgram make_opt0_and_nested_or() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("c")), new VarExpr("d"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt0_left_parens() {test("opt0_left_parens", FPROGRAMS.get("opt0_left_parens"));}
	protected static FProgram make_opt0_left_parens() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("c"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt0_nested_and() {test("opt0_nested_and", FPROGRAMS.get("opt0_nested_and"));}
	protected static FProgram make_opt0_nested_and() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new ece351.common.ast.AndExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("c")), new VarExpr("d"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt0_nested_or() {test("opt0_nested_or", FPROGRAMS.get("opt0_nested_or"));}
	protected static FProgram make_opt0_nested_or() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c"))), new VarExpr("d"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt0_no_parens() {test("opt0_no_parens", FPROGRAMS.get("opt0_no_parens"));}
	protected static FProgram make_opt0_no_parens() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("c"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt0_right_parens() {test("opt0_right_parens", FPROGRAMS.get("opt0_right_parens"));}
	protected static FProgram make_opt0_right_parens() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt1_and_true1() {test("opt1_and_true1", FPROGRAMS.get("opt1_and_true1"));}
	protected static FProgram make_opt1_and_true1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), ConstantExpr.TrueExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt1_and_true2() {test("opt1_and_true2", FPROGRAMS.get("opt1_and_true2"));}
	protected static FProgram make_opt1_and_true2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(ConstantExpr.TrueExpr, new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt1_or_false1() {test("opt1_or_false1", FPROGRAMS.get("opt1_or_false1"));}
	protected static FProgram make_opt1_or_false1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), ConstantExpr.FalseExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt1_or_false2() {test("opt1_or_false2", FPROGRAMS.get("opt1_or_false2"));}
	protected static FProgram make_opt1_or_false2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(ConstantExpr.FalseExpr, new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt2_and_false1() {test("opt2_and_false1", FPROGRAMS.get("opt2_and_false1"));}
	protected static FProgram make_opt2_and_false1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), ConstantExpr.FalseExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt2_and_false2() {test("opt2_and_false2", FPROGRAMS.get("opt2_and_false2"));}
	protected static FProgram make_opt2_and_false2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(ConstantExpr.FalseExpr, new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt2_or_true1() {test("opt2_or_true1", FPROGRAMS.get("opt2_or_true1"));}
	protected static FProgram make_opt2_or_true1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), ConstantExpr.TrueExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt2_or_true2() {test("opt2_or_true2", FPROGRAMS.get("opt2_or_true2"));}
	protected static FProgram make_opt2_or_true2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(ConstantExpr.TrueExpr, new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt3_not_and() {test("opt3_not_and", FPROGRAMS.get("opt3_not_and"));}
	protected static FProgram make_opt3_not_and() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.NotExpr(new ece351.common.ast.AndExpr(new ece351.common.ast.AndExpr(new VarExpr("c"), new VarExpr("b")), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt3_not_false() {test("opt3_not_false", FPROGRAMS.get("opt3_not_false"));}
	protected static FProgram make_opt3_not_false() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.NotExpr(ConstantExpr.FalseExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt3_not_not() {test("opt3_not_not", FPROGRAMS.get("opt3_not_not"));}
	protected static FProgram make_opt3_not_not() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.NotExpr(new ece351.common.ast.NotExpr(new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt3_not_or() {test("opt3_not_or", FPROGRAMS.get("opt3_not_or"));}
	protected static FProgram make_opt3_not_or() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.NotExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("c"), new VarExpr("b")), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt3_not_true() {test("opt3_not_true", FPROGRAMS.get("opt3_not_true"));}
	protected static FProgram make_opt3_not_true() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.NotExpr(ConstantExpr.TrueExpr)));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt4_and_complement1() {test("opt4_and_complement1", FPROGRAMS.get("opt4_and_complement1"));}
	protected static FProgram make_opt4_and_complement1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), new ece351.common.ast.NotExpr(new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt4_and_complement2() {test("opt4_and_complement2", FPROGRAMS.get("opt4_and_complement2"));}
	protected static FProgram make_opt4_and_complement2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new ece351.common.ast.NotExpr(new VarExpr("a")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt4_or_complement1() {test("opt4_or_complement1", FPROGRAMS.get("opt4_or_complement1"));}
	protected static FProgram make_opt4_or_complement1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.NotExpr(new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt4_or_complement2() {test("opt4_or_complement2", FPROGRAMS.get("opt4_or_complement2"));}
	protected static FProgram make_opt4_or_complement2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.NotExpr(new VarExpr("a")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt4_or_complement3() {test("opt4_or_complement3", FPROGRAMS.get("opt4_or_complement3"));}
	protected static FProgram make_opt4_or_complement3() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.OrExpr(new VarExpr("b"), new ece351.common.ast.NotExpr(new VarExpr("a"))))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt5_and_dup() {test("opt5_and_dup", FPROGRAMS.get("opt5_and_dup"));}
	protected static FProgram make_opt5_and_dup() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt5_or_dup() {test("opt5_or_dup", FPROGRAMS.get("opt5_or_dup"));}
	protected static FProgram make_opt5_or_dup() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt6_and_or() {test("opt6_and_or", FPROGRAMS.get("opt6_and_or"));}
	protected static FProgram make_opt6_and_or() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new VarExpr("a"), new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt6_and_or2() {test("opt6_and_or2", FPROGRAMS.get("opt6_and_or2"));}
	protected static FProgram make_opt6_and_or2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt6_or_and() {test("opt6_or_and", FPROGRAMS.get("opt6_or_and"));}
	protected static FProgram make_opt6_or_and() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt6_or_no_paren() {test("opt6_or_no_paren", FPROGRAMS.get("opt6_or_no_paren"));}
	protected static FProgram make_opt6_or_no_paren() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("b"), new VarExpr("a")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt7_big1() {test("opt7_big1", FPROGRAMS.get("opt7_big1"));}
	protected static FProgram make_opt7_big1() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b"))), new VarExpr("b")), new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")), new VarExpr("a"))), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt7_big2() {test("opt7_big2", FPROGRAMS.get("opt7_big2"));}
	protected static FProgram make_opt7_big2() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("c")), new ece351.common.ast.AndExpr(new ece351.common.ast.AndExpr(new VarExpr("d"), new VarExpr("c")), new VarExpr("e"))), new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("e"))), new ece351.common.ast.OrExpr(new VarExpr("c"), new VarExpr("b")))), new VarExpr("d"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void opt7_manual_example() {test("opt7_manual_example", FPROGRAMS.get("opt7_manual_example"));}
	protected static FProgram make_opt7_manual_example() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("d")), new VarExpr("a")), new VarExpr("b")), new VarExpr("c"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z01() {test("z01", FPROGRAMS.get("z01"));}
	protected static FProgram make_z01() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("x", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z02() {test("z02", FPROGRAMS.get("z02"));}
	protected static FProgram make_z02() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")), new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z03() {test("z03", FPROGRAMS.get("z03"));}
	protected static FProgram make_z03() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("m", new ece351.common.ast.OrExpr(new VarExpr("c"), new VarExpr("b"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z04() {test("z04", FPROGRAMS.get("z04"));}
	protected static FProgram make_z04() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("r", new ece351.common.ast.OrExpr(new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("d"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z05() {test("z05", FPROGRAMS.get("z05"));}
	protected static FProgram make_z05() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new VarExpr("d"))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z06() {test("z06", FPROGRAMS.get("z06"));}
	protected static FProgram make_z06() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("c")), new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z07() {test("z07", FPROGRAMS.get("z07"));}
	protected static FProgram make_z07() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("c"), new VarExpr("b")), new ece351.common.ast.OrExpr(new VarExpr("b"), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z08() {test("z08", FPROGRAMS.get("z08"));}
	protected static FProgram make_z08() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("y", new ece351.common.ast.AndExpr(new ece351.common.ast.OrExpr(new VarExpr("c"), new VarExpr("b")), new ece351.common.ast.OrExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z09() {test("z09", FPROGRAMS.get("z09"));}
	protected static FProgram make_z09() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("e", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("d")), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z10() {test("z10", FPROGRAMS.get("z10"));}
	protected static FProgram make_z10() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("g", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("d")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z11() {test("z11", FPROGRAMS.get("z11"));}
	protected static FProgram make_z11() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("g", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("d"), new VarExpr("a")), new ece351.common.ast.AndExpr(new VarExpr("a"), new VarExpr("b")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z12() {test("z12", FPROGRAMS.get("z12"));}
	protected static FProgram make_z12() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("g", new ece351.common.ast.OrExpr(new ece351.common.ast.AndExpr(new VarExpr("d"), new VarExpr("a")), new ece351.common.ast.AndExpr(new VarExpr("b"), new VarExpr("a")))));
		assert fp.repOk();
		return fp;
	}

	@Test public void z13() {test("z13", FPROGRAMS.get("z13"));}
	protected static FProgram make_z13() {
		FProgram fp = new FProgram();
		fp = fp.append(new AssignmentStatement("l", new ece351.common.ast.AndExpr(new VarExpr("b"), new VarExpr("a"))));
		assert fp.repOk();
		return fp;
	}

}

